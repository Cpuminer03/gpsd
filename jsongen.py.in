#!@PYTHON@
#
# This file is Copyright (c) 2010 by the GPSD project
# BSD terms apply: see the file COPYING in the distribution root for details.
#
# Never hand-hack what you can generate...
#
# This code generates template declarations for AIS-JSON parsing from a
# declarative specification of a JSON structure.
#
import sys, getopt

#
# Here is the information that makes it all work - attribute, type, and
# defult information for all fields.  We can generate either a JSON
# parser template spec or the C code for the corresponding dump functio
# from this information. Doing it this way guarantees consistency.
#
ais_specs = (
    {
    "initname" : "json_ais1",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type1",
    "fieldmap":(
        # fieldname   type        default
        ('status',   'uinteger', '0'),
        ('turn',     'integer',  'AIS_TURN_NOT_AVAILABLE'),
        ('speed',    'uinteger', 'AIS_SPEED_NOT_AVAILABLE'),
        ('accuracy', 'boolean',  'false'),
        ('lon',      'integer',  'AIS_LON_NOT_AVAILABLE'),
        ('lat',      'integer',  'AIS_LAT_NOT_AVAILABLE'),
        ('course',   'uinteger', 'AIS_COURSE_NOT_AVAILABLE'),
        ('heading',  'uinteger', 'AIS_HEADING_NOT_AVAILABLE'),
        ('second',   'uinteger', 'AIS_SEC_NOT_AVAILABLE'),
        ('maneuver', 'uinteger', 'AIS_SEC_INOPERATIVE'),
        ('raim',     'boolean',  'false'),
        ('radio',    'uinteger', '0'),
        ),
    },
    # Message types 2 and 3 duplicate 1
    {
    "initname" : "json_ais4",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type4",
    "fieldmap":(
        # fieldname   type        default
        ('timestamp', 'string',   None),
        ('accuracy',  'boolean',  "true"),
        ('lon',       'integer',  "AIS_LON_NOT_AVAILABLE"),
        ('lat',       'integer',  "AIS_LAT_NOT_AVAILABLE"),
        ('epfd',      'uinteger', "0"),
        ('raim',      'boolean',  "false"),
        ('radio',     'uinteger', "0"),
        ),
    "stringbuffered":("timestamp",),
    },
    {
    "initname" : "json_ais5",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type5",
    "fieldmap":(
        # fieldname        type            default
        ('imo',           'uinteger',      '0'),
        ('ais_version',   'uinteger',      '0'),
        ('callsign',      'string',        None),
        ('shipname',      'string',        None),
        ('shiptype',      'uinteger',      '0'),
        ('to_bow',        'uinteger',      '0'),
        ('to_stern',      'uinteger',      '0'),
        ('to_port',       'uinteger',      '0'),
        ('to_starboard',  'uinteger',      '0'),
        ('epfd',          'uinteger',      '0'),
        ('eta',           'string',        None),
        ('draught',       'uinteger',      '0'),
        ('destination',   'string',        None),
        ('dte',           'uinteger',      '1'),
        ),
    "stringbuffered":("eta",),
    },
    {
    "initname" : "json_ais6",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type6",
    "fieldmap":(
        # fieldname       type             default
        ('seqno',         'uinteger',      '0'),
        ('dest_mmsi',     'uinteger',      '0'),
        ('retransmit',    'boolean',       'false'),
        ('dac',           'uinteger',      '0'),
        ('fid',           'uinteger',      '0'),
        ('data',          'string',        None),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais6_fid16",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type6",
    "fieldmap":(
        # fieldname           type             default
        ('seqno',             'uinteger',      '0'),
        ('dest_mmsi',         'uinteger',      '0'),
        ('retransmit',        'boolean',       'false'),
        ('dac',               'uinteger',      '0'),
        ('fid',               'uinteger',      '0'),
        ('dac1fid16.persons', 'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais6_fid30",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type6",
    "fieldmap":(
        # fieldname               type             default
        ('seqno',                 'uinteger',      '0'),
        ('dest_mmsi',             'uinteger',      '0'),
        ('retransmit',            'boolean',       'false'),
        ('dac',                   'uinteger',      '0'),
        ('fid',                   'uinteger',      '0'),
        ('dac1fid30.linkage',     'uinteger',      '0'),
        ('dac1fid30.text',        'string',        '0'),
        ),
    "stringbuffered":("dacfid30.text",),
    },
    {
    "initname" : "json_ais6_fid32",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type6",
    "fieldmap":(
        # fieldname               type             default
        ('seqno',                 'uinteger',      '0'),
        ('dest_mmsi',             'uinteger',      '0'),
        ('retransmit',            'boolean',       'false'),
        ('dac',                   'uinteger',      '0'),
        ('fid',                   'uinteger',      '0'),
        ('dac1fid32.month',       'uinteger',      '0'),
        ('dac1fid32.day',         'uinteger',      '0'),
        ('dac1fid32.lon',         'integer',       '0'),
        ('dac1fid32.lat',         'integer',       '0'),
        ('dac1fid32.from_hour',   'uinteger',      'AIS_HOUR_NOT_AVAILABLE'),
        ('dac1fid32.from_min',    'uinteger',      'AIS_MINUTE_NOT_AVAILABLE'),
        ('dac1fid32.to_hour',     'uinteger',      'AIS_HOUR_NOT_AVAILABLE'),
        ('dac1fid32.to_min',      'uinteger',      'AIS_MINUTE_NOT_AVAILABLE'),
        ('dac1fid32.cdir',        'uinteger',      '0'),
        ('dac1fid32.cspeed',      'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais7",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type7",
    "fieldmap":(
        # fieldname       type             default
        ('mmsi1',         'uinteger',      '0'),
        ('mmsi2',         'uinteger',      '0'),
        ('mmsi3',         'uinteger',      '0'),
        ('mmsi4',         'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais8",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type8",
    "fieldmap":(
        # fieldname       type             default
        ('dac',           'uinteger',      '0'),
        ('fid',           'uinteger',      '0'),
        ('data',          'string',        None),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais8_fid29",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type8",
    "fieldmap":(
        # fieldname               type             default
        ('dac',                   'uinteger',      '0'),
        ('fid',                   'uinteger',      '0'),
        ('dac1fid29.linkage',     'uinteger',      '0'),
        ('dac1fid29.text',        'string',        '0'),
        ),
    "stringbuffered":("dacfid29.text",),
    },
    {
    "initname" : "json_ais8_fid31",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type8",
    "fieldmap":(
        # fieldname             type         default
        ('dac',                'uinteger',  '0'),
        ('fid',                'uinteger',  '0'),
        ('dac1fid31.lon',      'integer',   'DAC1FID31_LON_NOT_AVAILABLE'),
        ('dac1fid31.lat',      'integer',   'DAC1FID31_LAT_NOT_AVAILABLE'),
        ('dac1fid31.accuracy', 'boolean',   'false'),
        ('dac1fid31.day',      'uinteger',  'AIS_DAY_NOT_AVAILABLE'),
        ('dac1fid31.hour',     'uinteger',  'AIS_HOUR_NOT_AVAILABLE'),
        ('dac1fid31.minute',   'uinteger',  'AIS_MINUTE_NOT_AVAILABLE'),
        ('dac1fid31.wspeed',   'uinteger',  'DAC1FID31_WIND_NOT_AVAILABLE'),
        ('dac1fid31.wgust ',   'uinteger',  'DAC1FID31_WIND_NOT_AVAILABLE'),
        ('dac1fid31.wdir',     'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.wgustdir', 'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.airtemp',  'integer',   'DAC1FID31_AIRTEMP_NOT_AVAILABLE'),
        ('dac1fid31.pressure', 'uinteger',  'DAC1FID31_PRESSURE_NOT_AVAILABLE'),
        ('dac1fid31.pressuretend', 'uinteger', 'DAC1FID31_PRESSURETREND_NOT_AVAILABLE'),
        ('dac1fid31.visibility',   'uinteger', 'DAC1FID31_VISIBILITY_NOT_AVAILABLE'),
        ('dac1fid31.visgreater',   'boolean',  'false'),
        ('dac1fid31.waterlevel',   'integer',  'DAC1FID31_WATERLEVEL_NOT_AVAILABLE'),
        ('dac1fid31.leveltrend',   'uinteger', 'DAC1FID31_LEVELTREND_NOT_AVAILABLE'),
        ('dac1fid31.cspeed',   'uinteger',  'DAC1FID31_CSPEED_NOT_AVAILABLE'),
        ('dac1fid31.cdir',     'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.cspeed2',  'uinteger',  'DAC1FID31_CSPEED_NOT_AVAILABLE'),
        ('dac1fid31.cdir2',    'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.cdepth2',  'uinteger',  'DAC1FID31_CDEPTH_NOT_AVAILABLE'),
        ('dac1fid31.cspeed3',  'uinteger',  'DAC1FID31_CSPEED_NOT_AVAILABLE'),
        ('dac1fid31.cdir3',    'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.cdepth3',  'uinteger',  'DAC1FID31_CDEPTH_NOT_AVAILABLE'),
        ('dac1fid31.waveheight',  'uinteger',  'DAC1FID31_HEIGHT_NOT_AVAILABLE'),
        ('dac1fid31.waveperiod',  'uinteger',  'DAC1FID31_PERIOD_NOT_AVAILABLE'),
        ('dac1fid31.wavedir',     'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.swellheight', 'uinteger',  'DAC1FID31_HEIGHT_NOT_AVAILABLE'),
        ('dac1fid31.swellperiod', 'uinteger',  'DAC1FID31_PERIOD_NOT_AVAILABLE'),
        ('dac1fid31.swelldir',    'uinteger',  'DAC1FID31_DIR_NOT_AVAILABLE'),
        ('dac1fid31.seastate',    'uinteger',  'DAC1FID31_SEASTATE_NOT_AVAILABLE'),
        ('dac1fid31.preciptype',  'uinteger',  'DAC1FID31_PRECIPTYPE_NOT_AVAILABLE'),
        ('dac1fid31.salinity',    'uinteger',  'DAC1FID31_SALINITY_NOT_AVAILABLE'),
        ('dac1fid31.ice',      'boolean',      'false'),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais9",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type9",
    "fieldmap":(
        # fieldname       type             default
        ('alt',           'uinteger',      'AIS_ALT_NOT_AVAILABLE'),
        ('speed',         'uinteger',      'AIS_SPEED_NOT_AVAILABLE'),
        ('accuracy',      'boolean',       'false'),
        ('lon',           'integer',       'AIS_LON_NOT_AVAILABLE'),
        ('lat',           'integer',       'AIS_LAT_NOT_AVAILABLE'),
        ('course',        'uinteger',      'AIS_COURSE_NOT_AVAILABLE'),
        ('second',        'uinteger',      'AIS_SEC_NOT_AVAILABLE'),
        ('regional',      'uinteger',      '0'),
        ('dte',           'uinteger',      '1'),
        ('raim',          'boolean',       'false'),
        ('radio',         'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais10",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type10",
    "fieldmap":(
        # fieldname       type             default
        ('dest_mmsi',     'uinteger',      '0'),
        ),
    },
    # Message type 11 duplicates 4
    {
    "initname" : "json_ais12",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type12",
    "fieldmap":(
        # fieldname       type             default
        ('seqno',         'uinteger',      '0'),
        ('dest_mmsi',     'uinteger',      '0'),
        ('retransmit',    'boolean',       '0'),
        ('text',          'string',        None),
        ),
    },
    # Message type 13 duplicates 7 
    {
    "initname" : "json_ais14",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type14",
    "fieldmap":(
        # fieldname       type             default
        ('text',          'string',        None),
        ),
    },
    {
    "initname" : "json_ais15",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type15",
    "fieldmap":(
        # fieldname       type             default
        ('mmsi1',         'uinteger',      '0'),
        ('type1_1',       'uinteger',      '0'),
        ('offset1_1',     'uinteger',      '0'),
        ('type1_2',       'uinteger',      '0'),
        ('offset1_2',     'uinteger',      '0'),
        ('mmsi2',         'uinteger',      '0'),
        ('type2_1',       'uinteger',      '0'),
        ('offset2_1',     'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais16",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type16",
    "fieldmap":(
        # fieldname       type             default
        ('mmsi1',         'uinteger',      '0'),
        ('offset1',       'uinteger',      '0'),
        ('increment1',    'uinteger',      '0'),
        ('mmsi2',         'uinteger',      '0'),
        ('offset2',       'uinteger',      '0'),
        ('increment2',    'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais17",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type17",
    "fieldmap":(
        # fieldname       type             default
        ('lon',           'integer',       'AIS_GNS_LON_NOT_AVAILABLE'),
        ('lat',           'integer',       'AIS_GNS_LAT_NOT_AVAILABLE'),
        ('data',          'string',        None),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais18",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type18",
    "fieldmap":(
        # fieldname       type             default
        ('reserved',      'uinteger',      '0'),
        ('speed',         'uinteger',      'AIS_SPEED_NOT_AVAILABLE'),
        ('accuracy',      'boolean',       'false'),
        ('lon',           'integer',       'AIS_LON_NOT_AVAILABLE'),
        ('lat',           'integer',       'AIS_LAT_NOT_AVAILABLE'),
        ('course',        'uinteger',      'AIS_COURSE_NOT_AVAILABLE'),
        ('heading',       'uinteger',      'AIS_HEADING_NOT_AVAILABLE'),
        ('second',        'uinteger',      'AIS_SEC_NOT_AVAILABLE'),
        ('regional',      'uinteger',      '0'),
        ('cs',            'boolean',       'false'),
        ('display',       'boolean',       'false'),
        ('dsc',           'boolean',       'false'),
        ('band',          'boolean',       'false'),
        ('msg22',         'boolean',       'false'),
        ('raim',          'boolean',       'false'),
        ('radio',         'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais19",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type19",
    "fieldmap":(
        # fieldname       type             default
        ('reserved',      'uinteger',      '0'),
        ('speed',         'uinteger',      'AIS_SPEED_NOT_AVAILABLE'),
        ('accuracy',      'boolean',       'false'),
        ('lon',           'integer',       'AIS_LON_NOT_AVAILABLE'),
        ('lat',           'integer',       'AIS_LAT_NOT_AVAILABLE'),
        ('course',        'uinteger',      'AIS_COURSE_NOT_AVAILABLE'),
        ('heading',       'uinteger',      'AIS_HEADING_NOT_AVAILABLE'),
        ('second',        'uinteger',      'AIS_SEC_NOT_AVAILABLE'),
        ('regional',      'uinteger',      '0'),
        ('shipname',      'string',        None),
        ('shiptype',      'uinteger',      '0'),
        ('to_bow',        'uinteger',      '0'),
        ('to_stern',      'uinteger',      '0'),
        ('to_port',       'uinteger',      '0'),
        ('to_starboard',  'uinteger',      '0'),
        ('epfd',          'uinteger',      '0'),
        ('raim',          'boolean',       'false'),
        ('dte',           'uinteger',      '1'),
        ('assigned',      'boolean',       'false'),
        ),
    },
    {
    "initname" : "json_ais20",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type20",
    "fieldmap":(
        # fieldname       type             default
        ('offset1',       'uinteger',      '0'),
        ('number1',       'uinteger',      '0'),
        ('timeout1',      'uinteger',      '0'),
        ('increment1',    'uinteger',      '0'),
        ('offset2',       'uinteger',      '0'),
        ('number2',       'uinteger',      '0'),
        ('timeout2',      'uinteger',      '0'),
        ('increment2',    'uinteger',      '0'),
        ('offset3',       'uinteger',      '0'),
        ('number3',       'uinteger',      '0'),
        ('timeout3',      'uinteger',      '0'),
        ('increment3',    'uinteger',      '0'),
        ('offset4',       'uinteger',      '0'),
        ('number4',       'uinteger',      '0'),
        ('timeout4',      'uinteger',      '0'),
        ('increment4',    'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais21",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type21",
    "fieldmap":(
        # fieldname       type             default
        ('aid_type',          'uinteger',      '0'),
        ('name',          'string',        None),
        ('accuracy',      'boolean',       'false'),
        ('lon',           'integer',       'AIS_LON_NOT_AVAILABLE'),
        ('lat',           'integer',       'AIS_LAT_NOT_AVAILABLE'),
        ('to_bow',        'uinteger',      '0'),
        ('to_stern',      'uinteger',      '0'),
        ('to_port',       'uinteger',      '0'),
        ('to_starboard',  'uinteger',      '0'),
        ('epfd',          'uinteger',      '0'),
        ('second',        'uinteger',      '0'),
        ('regional',      'uinteger',      '0'),
        ('off_position',  'boolean',       'false'),
        ('raim',          'boolean',       'false'),
        ('virtual_aid',   'boolean',       'false'),
        ),
    },
    {
    "initname" : "json_ais22",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type22",
    "fieldmap":(
        # fieldname       type             default
        ('channel_a',     'uinteger',      '0'),
        ('channel_b',     'uinteger',      '0'),
        ('txrx',          'uinteger',      '0'),
        ('power',         'boolean',       'false'),
        ('area.ne_lon',   'integer',       'AIS_GNS_LON_NOT_AVAILABLE'),
        ('area.ne_lat',   'integer',       'AIS_GNS_LAT_NOT_AVAILABLE'),
        ('area.sw_lon',   'integer',       'AIS_GNS_LON_NOT_AVAILABLE'),
        ('area.sw_lat',   'integer',       'AIS_GNS_LAT_NOT_AVAILABLE'),
        ('mmsi.dest1',    'uinteger',      '0'),
        ('mmsi.dest2',    'uinteger',      '0'),
        ('addressed',     'boolean',       'false'),
        ('band_a',        'boolean',       'false'),
        ('band_b',        'boolean',       'false'),
        ('zonesize',      'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais23",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type23",
    "fieldmap":(
        # fieldname       type             default
        ('ne_lon',        'integer',       'AIS_GNS_LON_NOT_AVAILABLE'),
        ('ne_lat',        'integer',       'AIS_GNS_LAT_NOT_AVAILABLE'),
        ('sw_lon',        'integer',       'AIS_GNS_LON_NOT_AVAILABLE'),
        ('sw_lat',        'integer',       'AIS_GNS_LAT_NOT_AVAILABLE'),
        ('stationtype',   'uinteger',      '0'),
        ('shiptype',      'uinteger',      '0'),
        ('txrx',          'uinteger',      '0'),
        ('interval',      'uinteger',      '0'),
        ('quiet',         'uinteger',      '0'),
        ),
    },
    {
    "initname" : "json_ais24",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type24",
    "fieldmap":(
        # fieldname             type             default
        ('shipname',          'string',        None),	# Part A
        ('shiptype',          'uinteger',      '0'),	# Part B
        ('vendorid',          'string',        None),	# Part B
        ('callsign',          'string',        None),	# Part B
        ('mothership_mmsi',   'uinteger',      '0'),	# Part B
        ('dim.to_bow',        'uinteger',      '0'),	# Part B
        ('dim.to_stern',      'uinteger',      '0'),	# Part B
        ('dim.to_port',       'uinteger',      '0'),	# Part B
        ('dim.to_starboard',  'uinteger',      '0'),	# Part B
        ),
    },
    {
    "initname" : "json_ais25",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type25",
    "fieldmap":(
        # fieldname       type             default
        ('addressed',     'boolean',       'false'),
        ('structured',    'boolean',       'false'),
        ('dest_mmsi',     'uinteger',      '0'),
        ('app_id',        'uinteger',      '0'),
        ('data',          'string',        None),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais26",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type26",
    "fieldmap":(
        # fieldname       type             default
        ('addressed',     'boolean',       'false'),
        ('structured',    'boolean',       'false'),
        ('dest_mmsi',     'uinteger',      '0'),
        ('app_id',        'uinteger',      '0'),
        ('data',          'string',        None),
        ('radio',         'uinteger',      '0'),
        ),
    "stringbuffered":("data",),
    },
    {
    "initname" : "json_ais27",
    "header": "\tAIS_HEADER,",
    "structname": "ais->type27",
    "fieldmap":(
        # fieldname   type        default
        ('status',   'uinteger', '0'),
        ('speed',    'uinteger', 'AIS_LONGRANGE_SPEED_NOT_AVAILABLE'),
        ('accuracy', 'boolean',  'false'),
        ('lon',      'integer',  'AIS_LONGRANGE_LON_NOT_AVAILABLE'),
        ('lat',      'integer',  'AIS_LONGRANGE_LAT_NOT_AVAILABLE'),
        ('course',   'uinteger', 'AIS_LONGRANGE_COURSE_NOT_AVAILABLE'),
        ('raim',     'boolean',  'false'),
        ('gnss',     'boolean',  'true'),
        ),
    },
)

# You should not need to modify anything below this line.

def generate(spec):
    global outboard
    report = ""
    for (attr, itype, default) in spec["fieldmap"]:
        if attr in spec.get("stringbuffered", []):
            if attr not in outboard:
                report += "    char %s[JSON_VAL_MAX+1];\n" % attr
                outboard.append(attr)
    report += "    const struct json_attr_t %s[] = {\n" % spec["initname"]
    if "header" in spec:
        report += spec["header"] + "\n"
    for (attr, itype, default) in spec["fieldmap"]:
        structname = spec["structname"]
        if itype == "string":
            deref = ""
        else:
            deref = "&"
        if attr in spec.get("stringbuffered", []):
            target = attr
        else:
            target = structname + "." + attr
        if "." in attr:
            attr = attr[attr.rfind(".")+1:]
        report += '\t{"%s",%st_%s,%s.addr.%s = %s%s,\n' % \
               (attr, " "*(14-len(attr)), itype, " "*(10-len(itype)), itype, deref, target)
        leader = " " * 39
        if itype == "string":
            report += leader + ".len = sizeof(%s)},\n" % target
        else:
            report += leader + ".dflt.%s = %s},\n" % (itype, default)

    report += """\
	{NULL}
    };
"""
    print report

if __name__ == '__main__':
    try:
        # The --ais and --target= options are (required) placeholders.
        # In the future, this script will generate more different kinds
        # of code.
        (options, arguments) = getopt.getopt(sys.argv[1:], "", ["ais", "target="])
    except getopt.GetoptError, msg:
        print "jsongen.py: " + str(msg)
        raise SystemExit, 1

    spec = None
    target = None
    for (switch, val) in options:
        if switch == '--ais':
            spec = ais_specs
        elif switch == '--target':
            target = val

    if not target or not spec:
        print "jsongen.py: must specify type and target."
        raise SystemExit, 1

    if target == 'parser':
        print """/*
 * This is code generated by jsongen.py. Do not hand-hack it!
 */
 
/*@ -fullinitblock */

"""
        outboard = []
        for description in spec:
            generate(description)
        print """
/*@ +fullinitblock */

/* Generated code ends. */
"""
# The following sets edit modes for GNU EMACS
# Local Variables:
# mode:python
# End:
