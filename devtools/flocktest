#!/usr/bin/env python
#
"""\
flocktest - shepherd script for the GPSD test flock

usage: flocktest [-c] [-d subdir] [-k key] -v [-x exclude] [-?]

The -? makes flocktest prints this help and exits.

The -c option invokes copy mode, which copies the 'flockdriver' script to
all flock machines

The -k mode installs a specified ssh public key an all machines

Otherwise, the remote flockdriver script is executed on each machine.

The -d option passes it a name for the remote test subdirectory

The -v option shows all ssh commands issued and runs flockdriver with -x set.

The -x option specifies a comma-separated list of items that are
either remote hostnames or architecture tags.  Matching sites are
excluded.  You may wish to use this to avoid doing remote tests that
are redundant with your local ones.

If you have a .flocktest file, it is interpreted as a set of
attribute/value pairs, one per line separated by '='.  The following
attributes are recognized:

subdir = a default test directory name (-d)
exclude = a default exclude set (-x)

If you do not specify a subdirectory name either with -d or in the
.flocktest file, the value of $LOGNAME will be used.
"""

import os, sys, ConfigParser, getopt, socket, threading, commands

class FlockThread(threading.Thread):
    def __init__(self, site, command):
        threading.Thread.__init__(self)
        self.site = site
        self.command = command
    def run(self):
        (self.status, self.output) = commands.getstatusoutput(self.command)

class TestSite:
    "Methods for performing tests on a single remote site."
    def __init__(self, fqdn, config, execute=True):
        self.fqdn = fqdn
        self.config = config
        self.execute = execute
        self.me = self.config["login"] + "@" + self.fqdn
    def error(self, msg):
        "Report an error while executing a remote command."
        sys.stderr.write("%s: %s\n" % (self.fqdn, msg))
    def do_remote(self, remote):
        "Execute a command on a specified remote host."
        command = "ssh "
        if "port" in self.config:
            command += "-p %s " % self.config["port"]
        command += "%s '%s'" %  (self.me, remote)
        if self.verbose:
            print command
        current =  FlockThread(self, command)
        current.start()
        return current
    def update_remote(self, filename):
        "Copy a specified file to the remote home."
        command = "scp %s %s:~" % (filename, self.me)
        if self.verbose:
            print command
        status = os.system(command)
        if status:
            self.error("copy with '%s' failed" % command)
        return status
    def do_append(self, filename, string):
        "Append a line to a specified remote file, in foreground."
        self.do_remote("echo \"%s\" >>%s" % (string.strip(), filename))

class TestFlock:
    "Methods for performing parallel tests on a flock of remote sites."
    ssh_options = "no-port-forwarding,no-X11-forwarding," \
                 "no-agent-forwarding,no-pty "
    def __init__(self, sitelist):
        self.sitelist = sitelist
    def update_remote(self, filename):
        "Copy a specified file to the remote home on all machines."
        for site in self.sitelist:
            site.update_remote(filename)
    def do_remote(self, command):
        "Execute a command on all machines in the flock."
        slaves = []
        for site in self.sitelist:
            slaves.append(site.do_remote(command))
        for slave in slaves:
            slave.join()
        for slave in slaves:
            print "From %s:" % slave.site.fqdn
            print "Status:", slave.status
            if slave.status:
                print slave.output
    def exclude(self, exclusions):
        "Delete matching sites."
        self.sitelist = filter(lambda x: x.fqdn not in exclusions and x.config["arch"] not in exclusions, self.sitelist)
    def add_key(self, key):
        "Add the specified public key to all sites."
        for site in self.sitelist:
            site.do_append(".ssh/authorized_keys",
                           TestFlock.ssh_options + " " + key)
    def listdump(self):
        "Return a dump of the site list."
        return ", ".join(map(lambda x: x.fqdn, self.sitelist))

if __name__ == '__main__':
    try:
        (options, arguments) = getopt.getopt(sys.argv[1:], "cdk:vx:?")
    except getopt.GetoptError, msg:
        print "flocktest: " + str(msg)
        raise SystemExit, 1

    copymode = False
    exclusions = []
    subdir = None
    key = None
    verbose = False
    for (switch, val) in options:
        if switch == '-c':
            copymode = True
        elif  switch == 'd':
            subdir = val
        elif  switch == '-k':
            key = val
        elif  switch == '-N':
            execute = False
        elif switch == '-v':
            verbose = True
        elif switch == '-x':
            exclusions = map(lambda x: x.strip(), val.split(","))
        else: # switch == '-?':
            print __doc__
            sys.exit(0)

    config = ConfigParser.RawConfigParser()
    config.read(["flock-sites.ini"])
    sites = []
    for site in config.sections():
        newsite = TestSite(site, dict(config.items(site)))
        newsite.verbose = verbose
        if newsite.config["status"].lower() == "up":
            sites.append(newsite)
    flock = TestFlock(sites)

    controls = {}
    try:
        myconfig = open(".flocktest")
        controls = dict(map(lambda x: map(lambda y: y.strip(), x.split("=")), myconfig.readlines()))
    except IOError:
        pass

    if exclusions:
        flock.exclude(exclusions)
    elif 'exclude' in controls:
        flock.exclude(controls.get('exclude'))

    if copymode:
        flock.update_remote("flockdriver")
    elif key:
        flock.add_key(val)
    else:
        if subdir:
            pass
        elif 'subdir' in controls:
            subdir = controls.get('subdir')
        else:
            subdir = sys.getenv("LOGNAME")
        if not subdir:
            print "flocktest: you don't exist, go away!"
            sys.exit(1)
        print "Testing at", flock.listdump()
        command = "./flockdriver -d %s" % (subdir,)
        if verbose > 1:
            command = "sh -x " + command
        flock.do_remote(command)

# The following sets edit modes for GNU EMACS
# Local Variables:
# mode:python
# End:
